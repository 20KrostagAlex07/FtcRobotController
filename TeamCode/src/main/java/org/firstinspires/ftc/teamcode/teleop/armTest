//Testing TeleOp mode for arm PID

package org.firstinspires.ftc.teamcode.teleop;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;


@TeleOp(name = "Arm Test", group = "The Real Deal")

public class armTest extends OpMode {
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor arm;

    private int dir = -1;
    private double previousHeading = 0;
    private double integratedHeading = 0;

    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).

        arm = hardwareMap.get(DcMotor.class, "arm1");
	
	armClass armPID = new armClass;


        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");


    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        //reset timer
        runtime.reset();
        
        arm.setDirection(DcMotorSimple.Direction.REVERSE);

        arm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        // disables the default velocity control
		// this does NOT disable the encoder from counting, 
		// but lets us simply send raw motor power.
		arm.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
        
//GamePad 2 Controls
        
        
        //set arm power
        //if statement is the arm's counter-force against gravity
        //else if statement is the arm's slow mode
        //else statement is regular arm speed
        if (gamepad2.right_bumper) {
            arm.setPower(-0.1);
        } else if (gamepad2.left_bumper) {
            arm.setPower(gamepad2.left_stick_y * 0.35);
        } else {
            arm.setPower(gamepad2.left_stick_y * 0.7);
        }




            
//Other
            

        // Show the elapsed game time and wheel power.
        telemetry.addData("Status", "Run Time: " + runtime.toString());

        telemetry.addData("Heading", heading);
        telemetry.update();


    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
    
    }



}
